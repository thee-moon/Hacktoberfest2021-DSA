class Solution {
public:
    int dp[(1<<(14))+1][16];
    
    int go(int mask,int sum , vector<int>& tasks, int st){
        
        int n = tasks.size();
        
        if(sum>st) return INT_MAX;
        
        if(mask==((1<<n)-1)) return 1;
        
        if(dp[mask][sum]!=-1) return dp[mask][sum];
        
        int ans = INT_MAX;
        
        for(int i=0;i<n;i++){
            
            if((mask&(1<<i))>0) continue;
            
            
            int op1 = go(mask|(1<<i),sum+tasks[i],tasks,st);
            int op2 = 1 + go(mask|(1<<i),tasks[i],tasks,st);
            ans = min({ans,op1,op2});
        }
        
        return  dp[mask][sum] = ans;
        
    }
    int minSessions(vector<int>& tasks, int sessionTime) {
        int n = tasks.size();
        int mask = 0;
        memset(dp,-1,sizeof dp);
        return go(mask,0,tasks,sessionTime);
    }
};
